#include"threadpool.h"
#include<functional>
#include<thread>
#include<iostream>

const int TASK_MAX_THRESHHOLD = 1024;
const int THREAD_MAX_THRESHHOLD = 10;
const int THREAD_MAX_IDLE_TIME = 60;//线程最大空闲时间，单位为秒

ThreadPool::ThreadPool()
	: initThreadSize_(0)
	, idleThreadSize_(0)
	, taskSize_(0)
	, curThreadSize_(0)
	, threadSizeThreshHold_(THREAD_MAX_THRESHHOLD)
	, taskQueMaxThreshHold_(TASK_MAX_THRESHHOLD)
	, poolMode_(PoolMode::MODE_FIXED)
	, isPoolRunning_(false)
{}


ThreadPool::~ThreadPool()
{
	//构造里没有在堆上分配内存，所以不用实现
	//但是也不能省略，C++编程规范中，只要有构造函数，就要有对应的析构函数
	//不实现也要给写出来，为了以后扩展可能就需要用到析构了


	isPoolRunning_ = false;
	//notEmpty_.notify_all();//原来的会造成死锁的位置
	std::unique_lock<std::mutex> lock(taskQueMtx_);
	notEmpty_.notify_all();//改进后的，避免造成死锁的位置。线程池资源要回收了，把那些没有工作的阻塞等待的线程给唤醒才能正常回收
	exitCond_.wait(lock, [&]()->bool {return threads_.size() == 0; });//线程容器中的线程元素数量为0，就表示所有线程资源都被回收了
}

//设置线程池工作模式
void ThreadPool::setMode(PoolMode mode)
{
	if (checkRunningState())
		return;
	poolMode_ = mode;
}

//设置task任务队列上限阈值
void ThreadPool::setTaskQueMaxThreshHold(int threshhold)
{
	if (checkRunningState())
		return;
	taskQueMaxThreshHold_ = threshhold;
}

void ThreadPool::setThreadSizeThreshHold(int threshhold)
{
	if (checkRunningState())
		return;
	if (poolMode_ == PoolMode::MODE_CACHED)//只在cached模式下设置线程上限阈值，fixed模式下没必要改
		threadSizeThreshHold_ = threshhold;
}

//给线程池提交任务  用户调用该接口，传入任务对象，生产任务
Result ThreadPool::submitTask(std::shared_ptr<Task>sp)
{
	/*if (checkRunningState())
		return;*/

		// 获取锁
	std::unique_lock<std::mutex>lock(taskQueMtx_);

	// 线程的通信 判断任务队列是否有空余 
	while (taskQue_.size() == taskQueMaxThreshHold_)
	{
		//没空余，就解锁，阻塞等待,且最长不能阻塞超过1秒，否则判断提交任务失败，函数直接返回
		notFull_.wait_for(lock, std::chrono::seconds(1));
		//一秒后打印错误信息日志，并返回
		std::cout << "task queue is full, submit task fail!" << std::endl;
		return Result(sp, false);
	}

	// 如果有空余，把任务放入任务队列中，并把任务数量+1
	taskQue_.emplace(sp);
	taskSize_++;

	// 因为新放了任务，任务队列肯定不空了，在notEmpty_上进行通知
	notEmpty_.notify_all();

	//cached模式，要通过cached模式来创建出额外的线程，需要的判断条件
	//使用场景是，需要紧急处理的，小而快的任务。需要根据任务数量和空闲线程的数量，判断是否需要创建新的线程出来
	if (poolMode_ == PoolMode::MODE_CACHED
		&& taskSize_ > idleThreadSize_ //任务数量大于空闲线程数量
		&& curThreadSize_ < threadSizeThreshHold_//当前线程数量不能超过线程上限阈值
		)
	{
		//创建新线程
		auto ptr = std::make_unique<Thread>(std::bind(&ThreadPool::threadFunc, this, std::placeholders::_1));
		int threadId = ptr->getId();
		threads_.emplace(threadId, std::move(ptr));
		//创建完的线程要启动，修改线程池中相关线程的数量
		threads_[threadId]->start();
		curThreadSize_++;
		idleThreadSize_++;//刚创建出来的线程也属于空闲线程
	}

	std::cout << "submitTask success" << endl;
	return Result(sp);//返回执行结果，也就是任务的result对象
}

//开启线程池
void ThreadPool::start(int initThreadSize)
{
	//线程池一启动，就先修改线程池的启动状态
	isPoolRunning_ = true;

	//记录初始线程个数
	initThreadSize_ = initThreadSize;
	curThreadSize_ = initThreadSize;

	//创建线程对象
	for (size_t i = 0; i < initThreadSize_; ++i)
	{
		// 创建thread线程对象的时候，把线程函数给到thread线程对象，相当于把每个threadFunc函数都放到了线程队列中
		auto ptr = std::make_unique<Thread>(std::bind(&ThreadPool::threadFunc, this, std::placeholders::_1));
		//容器插入元素涉及到拷贝构造，unique_ptr只支持移动构造，所以需要用到移动语义
		int threadId = ptr->getId();
		threads_.emplace(threadId, std::move(ptr));
	}

	//启动所有线程
	for (size_t i = 0; i < initThreadSize_; ++i)
	{
		threads_[i]->start();//Thread类中的start，通过这个start函数去执行一个线程函数，才是启动线程
		idleThreadSize_++;//线程池刚启动的时候，都是空闲线程，启动一个，空闲线程计数就+1
	}
}

//线程函数，线程池中执行任务的线程
void ThreadPool::threadFunc(int threadid)
{
	//std::cout << std::this_thread::get_id() << std::endl;
	auto lastTime = std::chrono::high_resolution_clock().now();//线程开始执行任务时的时间

	for (;;)
	{
		std::shared_ptr<Task> task;
		{
			// 先获取锁
			std::unique_lock<std::mutex> lock(taskQueMtx_);

			std::cout << "tid:" << std::this_thread::get_id()
				<< "尝试获取任务..." << std::endl;

			// cached模式下，有可能已经创建了很多的线程，但是空闲时间超过60s，应该把多余的线程
			// 结束回收掉（超过initThreadSize_数量的线程要进行回收）
			// 当前时间 - 上一次线程执行的时间 > 60s

			// 每一秒中返回一次   怎么区分：超时返回？还是有任务待执行返回

			//全部任务执行完成，线程池中的线程资源才能开始回收
			//这段代码经过了反复修改，最终就是想把回收线程资源的代码写到一个地方
			//同样的代码避免在同一个地方出现多次，尽量在逻辑上统一架构
			while (taskQue_.size() == 0)
			{
				// 线程池要结束，回收线程资源
				if (!isPoolRunning_)
				{
					threads_.erase(threadid); // std::this_thread::getid()
					std::cout << "threadid:" << std::this_thread::get_id() << " exit!"
						<< std::endl;
					exitCond_.notify_all();
					return; // 线程函数结束，线程结束
				}

				if (poolMode_ == PoolMode::MODE_CACHED)
				{
					// 条件变量，超时返回了
					if (std::cv_status::timeout ==
						notEmpty_.wait_for(lock, std::chrono::seconds(1)))
					{
						auto now = std::chrono::high_resolution_clock().now();
						auto dur = std::chrono::duration_cast<std::chrono::seconds>(now - lastTime);
						if (dur.count() >= THREAD_MAX_IDLE_TIME
							&& curThreadSize_ > initThreadSize_)
						{
							// 开始回收当前线程
							// 记录线程数量的相关变量的值修改
							// 把线程对象从线程列表容器中删除   没有办法 threadFunc《=》thread对象
							// threadid => thread对象 => 删除
							threads_.erase(threadid); // std::this_thread::getid()
							curThreadSize_--;
							idleThreadSize_--;

							std::cout << "threadid:" << std::this_thread::get_id() << " exit!"
								<< std::endl;
							return;
						}
					}
				}
				else
				{
					// 等待notEmpty条件
					notEmpty_.wait(lock);
				}

				//if (!isPoolRunning_)
				//{
				//	threads_.erase(threadid); // std::this_thread::getid()
				//	std::cout << "threadid:" << std::this_thread::get_id() << " exit!"
				//		<< std::endl;
				//	exitCond_.notify_all();
				//	return; // 结束线程函数，就是结束当前线程了!
				//}
			}

			idleThreadSize_--;

			std::cout << "tid:" << std::this_thread::get_id()
				<< "获取任务成功..." << std::endl;

			// 从任务队列中取一个任务出来
			task = taskQue_.front();
			taskQue_.pop();
			taskSize_--;

			// 如果依然有剩余任务，继续通知其它得线程执行任务
			if (taskQue_.size() > 0)
			{
				notEmpty_.notify_all();
			}

			// 取出一个任务，进行通知，通知可以继续提交生产任务
			notFull_.notify_all();
		} // 到这就应该把锁释放掉

		// 当前线程负责执行这个任务
		if (task != nullptr)
		{
			// task->run(); // 执行任务；把任务的返回值setVal方法给到Result
			task->exec();
		}

		idleThreadSize_++;
		lastTime = std::chrono::high_resolution_clock().now(); // 更新线程执行完任务的时间
	}
}

bool ThreadPool::checkRunningState() const
{
	return isPoolRunning_;
}

///////////////线程方法实现
int Thread::generateId_ = 0;

void Thread::start()
{
	//创建一个线程对象来执行一个线程函数
	//局部线程对象出了start函数作用域之后，就会被析构了，为了不让线程随着线程对象的析构而被释放，导致程序崩溃挂掉
	//就把线程对象和线程函数给分离开来,设置分离线程，这样线程函数就不会随着线程对象的析构而被终止了
	std::thread t(func_, threadId_);
	t.detach();
}

int Thread::getId()const
{
	return threadId_;
}

Thread::Thread(ThreadFunc func)
	:func_(func)
	, threadId_(generateId_++)
{}

Thread::~Thread()
{

}

///////////////Result方法实现
Result::Result(std::shared_ptr<Task> task, bool isvalid)
	:task_(task)
	, isValid_(isvalid)
{
	task_->setResult(this);
}

Any Result::get()//这个函数是由用户调用的
{
	if (!isValid_)
		return "";
	sem_.wait();// task任务如果没有执行完，这里会阻塞用户的线程，这里是通过自实现的信号量的wait来阻塞的
	return std::move(any_);//拷贝构造被delete了，所以这里用移动构造
}

//这个函数的功能是，把任务的执行结果，通过setVal()给到Result对象
//这个函数应该在任务执行处调用，理论上来说就是threadFunc()里面的run()
//但run()方法只能负责执行任务，这个函数应该在run()后，被调用，把任务的执行结果，通过setVal()给到Result对象
//所以要把run()进一步封装，在那里就给封装到exec()中了
//这也是oop的一种思想，如果对于某个后续扩展的功能，不能直接写到虚函数里，可以把这个虚函数进一步封装
//在封装后的函数中再调用虚函数，可以实现新功能，同时一样可以实现多态，
void Result::setVal(Any any)
{
	this->any_ = std::move(any);
	sem_.post();
}

////////////  Task方法实现
Task::Task()
	:result_(nullptr)
{}

void Task::exec()
{
	if (result_ != nullptr)
		result_->setVal(run());//这里发生多态调用。封装到exec中目的是为了可以把任务的返回值setVal方法给到Result
}


void Task::setResult(Result* result)
{
	result_ = result;
}


//#include "threadpool.h"
//
//#include <functional>
//#include <thread>
//#include <iostream>
//
//const int TASK_MAX_THRESHHOLD = INT32_MAX;
//const int THREAD_MAX_THRESHHOLD = 1024;
//const int THREAD_MAX_IDLE_TIME = 60; // 单位：秒

//// 线程池构造
//ThreadPool::ThreadPool()
//	: initThreadSize_(0)
//	, taskSize_(0)
//	, idleThreadSize_(0)
//	, curThreadSize_(0)
//	, taskQueMaxThreshHold_(TASK_MAX_THRESHHOLD)
//	, threadSizeThreshHold_(THREAD_MAX_THRESHHOLD)
//	, poolMode_(PoolMode::MODE_FIXED)
//	, isPoolRunning_(false)
//{}
//
//// 线程池析构
//ThreadPool::~ThreadPool()
//{
//	isPoolRunning_ = false;
//
//	// 等待线程池里面所有的线程返回  有两种状态：阻塞 & 正在执行任务中
//	std::unique_lock<std::mutex> lock(taskQueMtx_);
//	notEmpty_.notify_all();
//	exitCond_.wait(lock, [&]()->bool {return threads_.size() == 0; });
//}
//
//// 设置线程池的工作模式
//void ThreadPool::setMode(PoolMode mode)
//{
//	if (checkRunningState())
//		return;
//	poolMode_ = mode;
//}
//
//// 设置task任务队列上线阈值
//void ThreadPool::setTaskQueMaxThreshHold(int threshhold)
//{
//	if (checkRunningState())
//		return;
//	taskQueMaxThreshHold_ = threshhold;
//}
//
//// 设置线程池cached模式下线程阈值
//void ThreadPool::setThreadSizeThreshHold(int threshhold)
//{
//	if (checkRunningState())
//		return;
//	if (poolMode_ == PoolMode::MODE_CACHED)
//	{
//		threadSizeThreshHold_ = threshhold;
//	}
//}
//
//// 给线程池提交任务    用户调用该接口，传入任务对象，生产任务
//Result ThreadPool::submitTask(std::shared_ptr<Task> sp)
//{
//	// 获取锁
//	std::unique_lock<std::mutex> lock(taskQueMtx_);
//
//	// 线程的通信  等待任务队列有空余   wait   wait_for   wait_until
//	// 用户提交任务，最长不能阻塞超过1s，否则判断提交任务失败，返回
//	if (!notFull_.wait_for(lock, std::chrono::seconds(1),
//		[&]()->bool { return taskQue_.size() < (size_t)taskQueMaxThreshHold_; }))
//	{
//		// 表示notFull_等待1s种，条件依然没有满足
//		std::cerr << "task queue is full, submit task fail." << std::endl;
//		// return task->getResult();  // Task  Result   线程执行完task，task对象就被析构掉了
//		return Result(sp, false);
//	}
//
//	// 如果有空余，把任务放入任务队列中
//	taskQue_.emplace(sp);
//	taskSize_++;
//
//	// 因为新放了任务，任务队列肯定不空了，在notEmpty_上进行通知，赶快分配线程执行任务
//	notEmpty_.notify_all();
//
//	// cached模式 任务处理比较紧急 场景：小而快的任务 需要根据任务数量和空闲线程的数量，判断是否需要创建新的线程出来
//	if (poolMode_ == PoolMode::MODE_CACHED
//		&& taskSize_ > idleThreadSize_
//		&& curThreadSize_ < threadSizeThreshHold_)
//	{
//		std::cout << ">>> create new thread..." << std::endl;
//
//		// 创建新的线程对象
//		auto ptr = std::make_unique<Thread>(std::bind(&ThreadPool::threadFunc, this, std::placeholders::_1));
//		int threadId = ptr->getId();
//		threads_.emplace(threadId, std::move(ptr));
//		// 启动线程
//		threads_[threadId]->start();
//		// 修改线程个数相关的变量
//		curThreadSize_++;
//		idleThreadSize_++;
//	}
//
//	// 返回任务的Result对象
//	return Result(sp);
//	// return task->getResult();
//}
//
//// 开启线程池
//void ThreadPool::start(int initThreadSize)
//{
//	// 设置线程池的运行状态
//	isPoolRunning_ = true;
//
//	// 记录初始线程个数
//	initThreadSize_ = initThreadSize;
//	curThreadSize_ = initThreadSize;
//
//	// 创建线程对象
//	for (size_t i = 0; i < initThreadSize_; i++)
//	{
//		// 创建thread线程对象的时候，把线程函数给到thread线程对象
//		auto ptr = std::make_unique<Thread>(std::bind(&ThreadPool::threadFunc, this, std::placeholders::_1));
//		int threadId = ptr->getId();
//		threads_.emplace(threadId, std::move(ptr));
//		// threads_.emplace_back(std::move(ptr));
//	}
//
//	// 启动所有线程  std::vector<Thread*> threads_;
//	for (size_t i = 0; i < initThreadSize_; i++)
//	{
//		threads_[i]->start(); // 需要去执行一个线程函数
//		idleThreadSize_++;    // 记录初始空闲线程的数量
//	}
//}
//
//// 定义线程函数   线程池的所有线程从任务队列里面消费任务
//void ThreadPool::threadFunc(int threadid)  // 线程函数返回，相应的线程也就结束了
//{
//	auto lastTime = std::chrono::high_resolution_clock().now();
//
//	// 所有任务必须执行完成，线程池才可以回收所有线程资源
//	for (;;)
//	{
//		std::shared_ptr<Task> task;
//		{
//			// 先获取锁
//			std::unique_lock<std::mutex> lock(taskQueMtx_);
//
//			std::cout << "tid:" << std::this_thread::get_id()
//				<< "尝试获取任务..." << std::endl;
//
//			// cached模式下，有可能已经创建了很多的线程，但是空闲时间超过60s，应该把多余的线程
//			// 结束回收掉（超过initThreadSize_数量的线程要进行回收）
//			// 当前时间 - 上一次线程执行的时间 > 60s
//
//			// 每一秒中返回一次   怎么区分：超时返回？还是有任务待执行返回
//			// 锁 + 双重判断
//			while (taskQue_.size() == 0)
//			{
//				// 线程池要结束，回收线程资源
//				if (!isPoolRunning_)
//				{
//					threads_.erase(threadid); // std::this_thread::getid()
//					std::cout << "threadid:" << std::this_thread::get_id() << " exit!"
//						<< std::endl;
//					exitCond_.notify_all();
//					return; // 线程函数结束，线程结束
//				}
//
//				if (poolMode_ == PoolMode::MODE_CACHED)
//				{
//					// 条件变量，超时返回了
//					if (std::cv_status::timeout ==
//						notEmpty_.wait_for(lock, std::chrono::seconds(1)))
//					{
//						auto now = std::chrono::high_resolution_clock().now();
//						auto dur = std::chrono::duration_cast<std::chrono::seconds>(now - lastTime);
//						if (dur.count() >= THREAD_MAX_IDLE_TIME
//							&& curThreadSize_ > initThreadSize_)
//						{
//							// 开始回收当前线程
//							// 记录线程数量的相关变量的值修改
//							// 把线程对象从线程列表容器中删除   没有办法 threadFunc《=》thread对象
//							// threadid => thread对象 => 删除
//							threads_.erase(threadid); // std::this_thread::getid()
//							curThreadSize_--;
//							idleThreadSize_--;
//
//							std::cout << "threadid:" << std::this_thread::get_id() << " exit!"
//								<< std::endl;
//							return;
//						}
//					}
//				}
//				else
//				{
//					// 等待notEmpty条件
//					notEmpty_.wait(lock);
//				}
//
//				//if (!isPoolRunning_)
//				//{
//				//	threads_.erase(threadid); // std::this_thread::getid()
//				//	std::cout << "threadid:" << std::this_thread::get_id() << " exit!"
//				//		<< std::endl;
//				//	exitCond_.notify_all();
//				//	return; // 结束线程函数，就是结束当前线程了!
//				//}
//			}
//
//			idleThreadSize_--;
//
//			std::cout << "tid:" << std::this_thread::get_id()
//				<< "获取任务成功..." << std::endl;
//
//			// 从任务队列种取一个任务出来
//			task = taskQue_.front();
//			taskQue_.pop();
//			taskSize_--;
//
//			// 如果依然有剩余任务，继续通知其它得线程执行任务
//			if (taskQue_.size() > 0)
//			{
//				notEmpty_.notify_all();
//			}
//
//			// 取出一个任务，进行通知，通知可以继续提交生产任务
//			notFull_.notify_all();
//		} // 就应该把锁释放掉
//
//		// 当前线程负责执行这个任务
//		if (task != nullptr)
//		{
//			// task->run(); // 执行任务；把任务的返回值setVal方法给到Result
//			task->exec();
//		}
//
//		idleThreadSize_++;
//		lastTime = std::chrono::high_resolution_clock().now(); // 更新线程执行完任务的时间
//	}
//}
//
//bool ThreadPool::checkRunningState() const
//{
//	return isPoolRunning_;
//}
//
//////////////////  线程方法实现
//int Thread::generateId_ = 0;
//
//// 线程构造
//Thread::Thread(ThreadFunc func)
//	: func_(func)
//	, threadId_(generateId_++)
//{}
//
//// 线程析构
//Thread::~Thread() {}
//
//// 启动线程
//void Thread::start()
//{
//	// 创建一个线程来执行一个线程函数 pthread_create
//	std::thread t(func_, threadId_);  // C++11来说 线程对象t  和线程函数func_
//	t.detach(); // 设置分离线程   pthread_detach  pthread_t设置成分离线程
//}
//
//int Thread::getId()const
//{
//	return threadId_;
//}
//
//
///////////////////  Task方法实现
//Task::Task()
//	: result_(nullptr)
//{}
//
//void Task::exec()
//{
//	if (result_ != nullptr)
//	{
//		result_->setVal(run()); // 这里发生多态调用
//	}
//}
//
//void Task::setResult(Result* res)
//{
//	result_ = res;
//}
//
///////////////////   Result方法的实现
//Result::Result(std::shared_ptr<Task> task, bool isValid)
//	: isValid_(isValid)
//	, task_(task)
//{
//	task_->setResult(this);
//}
//
//Any Result::get() // 用户调用的
//{
//	if (!isValid_)
//	{
//		return "";
//	}
//	sem_.wait(); // task任务如果没有执行完，这里会阻塞用户的线程
//	return std::move(any_);
//}
//
//void Result::setVal(Any any)  // 谁调用的呢？？？
//{
//	// 存储task的返回值
//	this->any_ = std::move(any);
//	sem_.post(); // 已经获取的任务的返回值，增加信号量资源
//}